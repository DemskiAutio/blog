<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ヴェルフェゴールのため息</title>
  
  <subtitle>怠惰なPG見習いのため息で綴られるメモのようなモノ</subtitle>
  <link href="/demski/atom.xml" rel="self"/>
  
  <link href="https://demskiautio.github.io/demski/"/>
  <updated>2019-06-28T09:46:00.554Z</updated>
  <id>https://demskiautio.github.io/demski/</id>
  
  <author>
    <name>Demski Autio</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows10が不安定な時にコマンドプロンプトから回復する方法</title>
    <link href="https://demskiautio.github.io/demski/2019/06/28/WindowsRepair/"/>
    <id>https://demskiautio.github.io/demski/2019/06/28/WindowsRepair/</id>
    <published>2019-06-28T09:26:02.000Z</published>
    <updated>2019-06-28T09:46:00.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>Windows10を使っていて，突然動作しなくなったりクラッシュが発生することがあります。<br>そんな時の為に，Windowsにはシステムファイルをチェック・修復するツール「SFC.exe」があります。<br>それを使うにはコマンドプロンプトかPowerShellでコマンドを叩いてやると楽です。<br>ただ，いくつか注意点などあるしいちいちコマンドを覚えるのも面倒なので，備忘録として記事に残しておきます。</p><a id="more"></a><!--toc--><h2 id="「DISM-exe」と「sfc-scannow」，「chkedsk」"><a href="#「DISM-exe」と「sfc-scannow」，「chkedsk」" class="headerlink" title="「DISM.exe」と「sfc /scannow」，「chkedsk」"></a>「DISM.exe」と「sfc /scannow」，「chkedsk」</h2><p>Windows7の頃までは <strong>「sfc /scannow」</strong> が有名でしたが，Win8.1以降には <strong>「DISM.exe」</strong> というのが加わったようです。<br>この二つの違いは <em>「DISM.exe」はWindowsのシステムイメージの破損の確認と修復を、「sfc /scannow」は保護されているすべてのシステムファイルをスキャンして破損したファイルがあった場合は「C:\Windows\System32\dllcache」の圧縮フォルダにあるキャッシュコピーから復元します。</em></p><p><strong>実行順は「DISM.exe」から始め，それでも不安定なら「sfc /scannow」を実行します。</strong></p><h2 id="「DISM-exe」の実行方法"><a href="#「DISM-exe」の実行方法" class="headerlink" title="「DISM.exe」の実行方法"></a>「DISM.exe」の実行方法</h2><p>まずは，管理者権限でPowerShellを起動します。<br>スタートアイコンを右クリックして出てきたメニューからWindows PowerShell(管理者)(A)というのをクリックします。<br>すると，PowerShellが管理者権限付きで起動します。(途中で警告がでたら「はい」を選びます)。<br>そしたら，</p><figure class="highlight console"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DISM.exe /Online /Cleanup-image /Restorehealth</span><br></pre></td></tr></table></figure><p>と入力してEnterキーを押すとDISM.exeがスタートします。<br>ステータスが100％になるまで待ちます。<br>時間はケース・バイ・ケースですが，おおよそ15分～1時間位は覚悟しましょう。<br>「操作は正常に完了しました。」と表示されれば終了です。</p><h3 id="DISM-exeのオプション"><a href="#DISM-exeのオプション" class="headerlink" title="DISM.exeのオプション"></a>DISM.exeのオプション</h3><p>先ほど叩いたコマンドのうち「/」以降はオプション指定です。<br>とは言え「/?」を叩けばオプションの簡単な説明が出てきます。<br>さらに詳しく見たいオプションがあれば，そのオプション後に「/?」を叩けば説明が表示されます。</p><div class="figure " style="width:100%;"><a class="fancybox" href="help.png" title="DISM のヘルプ" data-caption="DISM のヘルプ" data-fancybox="console"><img class="fig-img" src="help.png" style="width:100%;height:100%;" alt="DISM のヘルプ"></a><span class="caption">DISM のヘルプ</span></div><div style="clear:both;"></div><h2 id="「sfc-scannow」の実行方法"><a href="#「sfc-scannow」の実行方法" class="headerlink" title="「sfc /scannow」の実行方法"></a>「sfc /scannow」の実行方法</h2><p>DISM.exeを実行しても不安定なら，「sfc /scannow」を実行します。<br>実行法はDISM.exeと同じように管理者権限付きのPowerShellを起動してコマンドを叩くだけです。<br>例によって100%になるまで待ちます。</p><span class="highlight-text success">「Windowsリソース保護は、整合性違反を検出しませんでした。」</span><p>と表示されれば問題ありません。<br>もし</p><span class="highlight-text success">「破損したファイルを検出し、正常に修復しました。」</span><p>と表示された場合は，修復されたので問題ありません。Windowsを再起動しましょう。</p><span class="highlight-text danger">「Windows リソース保護は要求された操作を実行できませんでした。」</span><p>と表示されたら，Windowsのセーフモードで立ち上げて%WinDir%\WinSxS\Temp の下に PendingDeletes フォルダーと PendingRenames フォルダーが存在することを確認します。<br>このファイルが何なのかはよくわかりません。まぁ，あってもなくても「sfc /scannow」を試してみましょう。</p><span class="highlight-text danger">「Windows リソース保護は、破損したファイルを検出しましたが、その一部を修正できませんでした。 詳細は CBS.Log (%WinDir%\Logs\CBS\CBS.log) にあります。」</span><p>と出たら修復失敗です。<br>logファイルなんて見ても分かりませんので「sfc /scannow」での回復は諦めましょう。</p><h2 id="「chkdsk」"><a href="#「chkdsk」" class="headerlink" title="「chkdsk」"></a>「chkdsk」</h2><p>こちらは，ディスクのエラーを確認するためのコマンドです。(因みに，ドライブを右クリックで出てくるオプションからでも実行できます。)<br>ただ「chkdsk」はオプションを指定せずに実行すると、一切の修復作業を行いません。エラーがあるかを確認するだけです。<br>オプションには以下のものがあります。</p><div class="alert warning"><p>/f    ファイルシステムを修復する。<br>あくまでもソフトウェア的な修復で、ハードディスクのセクタチェックは行わない。<br>最も使用頻度の高いオプション。</p></div><div class="alert warning"><p>/r    不良セクタを検出し、不良クラスタから読み出し可能なデータは回収する。<br>また、「/f」のオプションを包括する。<br>領域内の全セクタをチェックするため、非常に時間がかかる。<br>読めないデータはそのまま失われるので、過信は禁物。  </p></div><div class="alert warning"><p>/b    ファイルシステムに登録されている不良クラスタをチェックし直す。<br>また、「/r」のオプションを包括する。  </p></div><p>ということなので，通常は「/f」オプションをつけて実行します。<br>ただ，checkdskはドライブに大きな負荷をかけることになります。<br>因みに，最近主流になり始めているSSDには効果が無いという情報がちらほら見かけます。<br>その反面，しつこく何回か叩いたら回復したという情報も。<br>自分ではまだここまで試すエラーが出てないので，真相はわかりません。残念。</p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Windowsの調子が悪い時は</p><div class="alert info"><ol><li>「Windows PowerShell」を管理者権限で起動</li><li>DISM.exe /Online /Cleanup-image /Restorehealth を実行</li><li>sfc /scannow を実行</li><li>chkdsk /fを試す。ダメ元で/rを叩きまくる。</li></ol></div><p>と，こんな感じになるかと思います。<br>以上，Windowsの調子が悪い時に試すコマンドの紹介でした。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://onoredekaiketsu.com/repair-windows-with-dism-and-sfc-scannow/" target="_blank" rel="noopener">「己で解決！泣かぬなら己で鳴こうホトトギス」 DISM.exeとsfc /scannowでWindowsを修復する</a></p></li><li><p><a href="https://support.microsoft.com/ja-jp/help/929833/use-the-system-file-checker-tool-to-repair-missing-or-corrupted-system" target="_blank" rel="noopener">「Windowsのサポート」 システム ファイル チェッカー ツールを使用して不足または破損しているシステム ファイルを修復する</a></p></li><li><p><a href="https://qiita.com/ryotuxtuki/items/884e8430b11e33f07b61" target="_blank" rel="noopener">SSDに不良ブロックができても諦めてはいけない件</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;p&gt;Windows10を使っていて，突然動作しなくなったりクラッシュが発生することがあります。&lt;br&gt;そんな時の為に，Windowsにはシステムファイルをチェック・修復するツール「SFC.exe」があります。&lt;br&gt;それを使うにはコマンドプロンプトかPowerShellでコマンドを叩いてやると楽です。&lt;br&gt;ただ，いくつか注意点などあるしいちいちコマンドを覚えるのも面倒なので，備忘録として記事に残しておきます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="コンピューター" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC/"/>
    
      <category term="Windows10" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC/Windows10/"/>
    
      <category term="回復" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC/Windows10/%E5%9B%9E%E5%BE%A9/"/>
    
    
      <category term="Windows10" scheme="https://demskiautio.github.io/demski/tags/Windows10/"/>
    
      <category term="回復" scheme="https://demskiautio.github.io/demski/tags/%E5%9B%9E%E5%BE%A9/"/>
    
      <category term="コマンドプロンプト" scheme="https://demskiautio.github.io/demski/tags/%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%83%97%E3%83%AD%E3%83%B3%E3%83%97%E3%83%88/"/>
    
      <category term="PowerShell" scheme="https://demskiautio.github.io/demski/tags/PowerShell/"/>
    
  </entry>
  
  <entry>
    <title>EditorConfigの使い方</title>
    <link href="https://demskiautio.github.io/demski/2019/06/08/editor-config/"/>
    <id>https://demskiautio.github.io/demski/2019/06/08/editor-config/</id>
    <published>2019-06-08T06:34:08.000Z</published>
    <updated>2019-06-12T10:20:31.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h2><p>EditorConfigは，コーディング規則を各自が使うエディタ間で統一するのに役立つツールです。<br>コーディングすると時に，インデントの数や改行の位置，「,」を文末にするか文頭にするか等，色々なコーディング規約が提案<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup> されています。<br>しかし，チームでコーディグする場合，経験や好みによって個々人が好きな書き方をしてしまい，複数のルールが混在することになります。<br>それを防ぐ手段として，なかなか便利なので，メモがてら<a href="https://editorconfig.org/" target="_blank" rel="noopener">公式ページ</a>を翻訳・要約記事にしてみました。</p><a id="more"></a><!-- toc --><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><p>以下は、.editorconfigPythonおよびJavaScriptファイルの行末およびインデントスタイルを設定するファイルの例です。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 公式ページのURL: https://EditorConfig.org</span><br><span class="line"></span><br><span class="line"># 一番上のEditorConfig</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># 各ファイルの最後に改行が付いた、Unixスタイルの改行</span><br><span class="line">[*]</span><br><span class="line">end_of_line = lf</span><br><span class="line">insert_final_newline = true</span><br><span class="line"></span><br><span class="line"># Matches multiple files with brace expansion notation</span><br><span class="line"># Set default charset</span><br><span class="line">[*.&#123;js,py&#125;]</span><br><span class="line">charset = utf-8</span><br><span class="line"></span><br><span class="line"># 字下げ</span><br><span class="line">[*.py]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 4</span><br><span class="line"></span><br><span class="line"># タブのインデント (no size specified)</span><br><span class="line">[Makefile]</span><br><span class="line">indent_style = tab</span><br><span class="line"></span><br><span class="line"># Iibディレクトリ配下のすべてのJSに対するインデントの上書き</span><br><span class="line">[lib/**.js]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line"></span><br><span class="line"># 正確なファイルはpackage.jsonまたは.travis.ymlのどちらかと一致します。</span><br><span class="line">[&#123;package.json,.travis.yml&#125;]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br></pre></td></tr></table></figure><p>これらの内容を「.editorconfig 」ファイルとして保存する。<br>Windowsで冒頭が「.」のファイルを作るには<span class="highlight-text green">「.ファイル名.」</span>のように，冒頭と末尾に「.(ピリオド)」を打つ。</p><h2 id="editorconfigファイルの位置"><a href="#editorconfigファイルの位置" class="headerlink" title=".editorconfigファイルの位置"></a>.editorconfigファイルの位置</h2><p>基本的にはプロジェクトのルートに置けばよい。<br>EditorConfigは,上から下に読み上げられ，見つかった規則から優先して適用されます。<br>設定ファイルは，大文字と小文字を区別せず，「/(スラッシュ)」のみが使用でき，コメントはoctothorpes（#）またはセミコロン（;）が使用できる。<br>コメントは行ごとに書き，文字エンコードはUTF-8出なければならない。区切り行はCRLFもしくはLFが使われる。</p><p>ファイルパスグロブパターンと現在サポートされているEditorConfigプロパティを以下に説明します。</p><h3 id="ワイルドカードパターン"><a href="#ワイルドカードパターン" class="headerlink" title="ワイルドカードパターン"></a>ワイルドカードパターン</h3><p>ワイルドカードマッチングのためにセクション名で認識される特殊文字</p><table><thead><tr><th>ワイルドカード</th><th>意味</th></tr></thead><tbody><tr><td>*</td><td>パス区切り文字（/）を除く、任意の文字列と一致します。</td></tr><tr><td>**</td><td>任意の文字列に一致</td></tr><tr><td>？</td><td>任意の位置文字に一致</td></tr><tr><td>[name]</td><td>名前の任意の1文字に一致</td></tr><tr><td>[!name]</td><td>名前に含まれていない任意の1文字に一致</td></tr><tr><td>[s1,s2,s3]</td><td>指定された任意の文字列(コマンドで区切られている)に一致します</td></tr><tr><td>[num1..num2]</td><td>num1とnum2の間の任意の整数と一致します。ここで、num1とnum2は、正または負のいずれかです。</td></tr></tbody></table><p>特殊文字はバックスラッシュでエスケープすることができるので、それらはワイルドカードパターンとして解釈されません。</p><h3 id="サポートされているプロパティ"><a href="#サポートされているプロパティ" class="headerlink" title="サポートされているプロパティ"></a>サポートされているプロパティ</h3><p>詳しいリストは<a href="https://github.com/editorconfig/editorconfig/wiki/EditorConfig-Properties" target="_blank" rel="noopener">ウィキ</a>を参考の事。<br>主なプロパティは以下のようなものがある。</p><ul><li><p>indent_style：ハードタブまたはソフトタブをそれぞれ使用するには、タブまたはスペースに設定します。</p></li><li><p>indent_size：各インデントレベルに使用される列数とソフトタブの幅を定義する整数（サポートされている場合）。tabに設定すると、tab_width（指定されていれば）の値が使用されます。</p></li><li><p>end_of_line：改行の表現方法を制御するには、lf、cr、またはcrlfに設定します。</p></li><li><p>charset：latin1、utf-8、utf-8-bom、utf-16beまたはutf-16leに設定して文字セットを制御します。utf-8推奨</p></li><li><p>trim_trailing_whitespace：改行文字の前の空白文字を削除するにはtrueに設定し、そうでないことを保証するにはfalseに設定します</p></li><li><p>nsert_final_newline：保存時にファイルが改行で終わっていることを確認するにはtrueに、そうでないことを確認するにはfalseに設定します。</p></li><li><p>rootセクションの外側のファイルの先頭に指定する必要がある特殊なプロパティ。現在のファイルでファイル検索を停止するには、trueに設定し.editorconfigます。</p></li></ul><p>プロパティとその値は，すべて小文字で解釈されます。<br>プロパティが指定されていない場合はエディタと標準設定が使用されます。<br>必要な項目のプロパティのみ設定し，それ以外の多くは未設定のままにしておくことが推奨されています。</p><h2 id="終わりに"><a href="#終わりに" class="headerlink" title="終わりに"></a>終わりに</h2><p>ざっと公式ページを翻訳・要約してみました。<br>テキストファイルに必要な設定だけ書けば，別のエディタ間でも設定を共有できるのは嬉しいですね。<br>チーム開発で決まった規約が気に入らなかった場合は，チームの規約をEditorConfigに記述し，コーディング時は自分の好きな設定で書いて，提出するときにEditorConfigで成形すればよさそうです。</p><h2 id="参考HP"><a href="#参考HP" class="headerlink" title="参考HP"></a>参考HP</h2><p><a href="https://editorconfig.org/" target="_blank" rel="noopener">EditorConfig公式</a><br><a href="https://github.com/editorconfig/" target="_blank" rel="noopener">公式GitHub</a><br><a href="https://twitter.com/EditorConfig" target="_blank" rel="noopener">公式Twitter</a><br><a href="https://github.com/editorconfig/editorconfig/wiki/Projects-Using-EditorConfig" target="_blank" rel="noopener">公式Wikiのプロジェクトリスト</a></p><div id="footnotes"><hr><div id="footnotelist"><ol style="list-style:none; padding-left: 0;"><li id="fn:1"><span style="display: inline-block; vertical-align: top; padding-right: 10px;">1.</span><span style="display: inline-block; vertical-align: top;"><a href="https://google.github.io/styleguide/htmlcssguide.html" target="_blank" rel="noopener">google HTML/CSS Style Guid</a>  <a href="https://www.w3schools.com/html/html5_syntax.asp" target="_blank" rel="noopener">w3schools</a> ,  <a href="http://met.hanatoweb.jp/guideline/html5/" target="_blank" rel="noopener">hanatoweb</a> など。</span><a href="#fnref:1" rev="footnote"> ↩</a></li></ol></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h2&gt;&lt;p&gt;EditorConfigは，コーディング規則を各自が使うエディタ間で統一するのに役立つツールです。&lt;br&gt;コーディングすると時に，インデントの数や改行の位置，「,」を文末にするか文頭にするか等，色々なコーディング規約が提案&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; されています。&lt;br&gt;しかし，チームでコーディグする場合，経験や好みによって個々人が好きな書き方をしてしまい，複数のルールが混在することになります。&lt;br&gt;それを防ぐ手段として，なかなか便利なので，メモがてら&lt;a href=&quot;https://editorconfig.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;公式ページ&lt;/a&gt;を翻訳・要約記事にしてみました。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ホームページ作成" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/"/>
    
      <category term="ツール" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="EditorConfig" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/EditorConfig/"/>
    
      <category term="Web開発" scheme="https://demskiautio.github.io/demski/categories/Web%E9%96%8B%E7%99%BA/"/>
    
      <category term="チーム開発" scheme="https://demskiautio.github.io/demski/categories/Web%E9%96%8B%E7%99%BA/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/"/>
    
    
      <category term="ツール" scheme="https://demskiautio.github.io/demski/tags/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="コーディング" scheme="https://demskiautio.github.io/demski/tags/%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
      <category term="プログラミング" scheme="https://demskiautio.github.io/demski/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="チーム開発" scheme="https://demskiautio.github.io/demski/tags/%E3%83%81%E3%83%BC%E3%83%A0%E9%96%8B%E7%99%BA/"/>
    
      <category term="EditorConfig" scheme="https://demskiautio.github.io/demski/tags/EditorConfig/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 Boilerplate入門</title>
    <link href="https://demskiautio.github.io/demski/2019/05/25/html5boilerplate-1/"/>
    <id>https://demskiautio.github.io/demski/2019/05/25/html5boilerplate-1/</id>
    <published>2019-05-25T04:46:56.000Z</published>
    <updated>2019-06-07T12:14:10.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="初めに"><a href="#初めに" class="headerlink" title="初めに"></a>初めに</h1><p>HTML5 Boilerplateは，必要なファイル一式が詰まったHTML5フレームワークです。<br>チームでの開発では，ファイル構造，基本的な命名規則，使用するライブラリーなどを共有することが多々あります。<br>その一つの回答として，いくつものフレームワークが提案されています。<br>HTML5 Boilerplateはその中でも割と古参のフレームワークであり，カスタマイズ性に優れているとされています。<br>このページでは，一通り作成準備を終わらせるまでを記録します。</p><a id="more"></a><!--toc--><h2 id="一式をダウンロード"><a href="#一式をダウンロード" class="headerlink" title="一式をダウンロード"></a>一式をダウンロード</h2><p>まずは，<a href="https://html5boilerplate.com/" title="HTML5 Boilerplate" target="_blank" rel="noopener">公式ページ</a>にアクセスします。<br>中央のDownloadボタンを押せば最新のファイル一式がダウンロードできます。  </p><div class="figure fig-25" style="width:100%;"><a class="fancybox" href="html5boilerplatehome.png" title="Html5Boilerplate公式ページ" data-caption="Html5Boilerplate公式ページ" data-fancybox="default"><img class="fig-img" src="html5boilerplatehome.png" style="width:100%;height:100%;" alt="Html5Boilerplate公式ページ"></a><span class="caption">Html5Boilerplate公式ページ</span></div><div style="clear:both;"></div><p>なお，</p><figure class="highlight console"><figcaption><span>npm []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i html5-boilerplate --save</span><br></pre></td></tr></table></figure><p>で,パッケージマネージャーのnpmでローカルインソールできます。</p><h2 id="解凍"><a href="#解凍" class="headerlink" title="解凍"></a>解凍</h2><p>zipファイルで落ちてくるので，何も考えず解凍します。<br>すると，下記のファイル群が出てきます。</p><div class="figure fig-25" style="width:100%;"><a class="fancybox" href="capture1.PNG" title="Html5Boilerplatehome一式" data-caption="Html5Boilerplatehome一式" data-fancybox="default"><img class="fig-img" src="capture1.PNG" style="width:100%;height:100%;" alt="Html5Boilerplatehome一式"></a><span class="caption">Html5Boilerplatehome一式</span></div><div style="clear:both;"></div>  <p>あらゆるページが構築できるよう，ツールやCSS・Javascriptなど多くのファイルが含まれています。<br>一つのプロジェクトで全てを使うことはないので，この中から必要なモノを取捨選択していくことになります。<br>公式も「Delete キー歓迎」だそうですｗ</p><h2 id="ピックアップ"><a href="#ピックアップ" class="headerlink" title="ピックアップ"></a>ピックアップ</h2><p>静的なホームページ構築に必要そうなファイルをピックアップします。</p><ol><li><p><a href="https://editorconfig.org/" target="_blank" rel="noopener">.editorconfig</a>…各エディタごとに共通のコーディングさせるためのツール。</p></li><li><p><a href="http://humanstxt.org/JA" target="_blank" rel="noopener">humans.txt</a>…制作者を明示的にするためのファイル？</p></li><li><p><a href="http://www.robotstxt.org/" target="_blank" rel="noopener">robots.txt</a>…検索エンジンのクローラー（ロボット）のWEBページのへのアクセスを制限するためのファイルで、ロボットに向けた命令文（アクセスを許可/許可しない）を記述します</p></li><li><p><a href="https://developer.mozilla.org/ja/docs/Web/Manifest" target="_blank" rel="noopener">site.webmanifest</a>…ウェブマニフェスト。オフライン作業やプッシュ通知の受け取りなどのその他の可能性を持ったウェブサイトを構築できる。</p></li></ol><h2 id="ビルド"><a href="#ビルド" class="headerlink" title="ビルド"></a>ビルド</h2><p>ビルドとはWebページのパフォーマンス(読み込み速度など)を上げるため，HTML・CSS・JavaScriptなどの空白を削除する事。<br>HTML5 BoilerplateではのANT ビルド・スクリプトが含まれています。  </p><p>ビルドによって  </p><blockquote><ul><li>YUI Compressor によって JavaScript を組み合わせ、縮小化します。</li><li>CSS を組み合わせ、縮小化します。</li><li>jpegtran と optipng によって JPG ファイルと PNG ファイルを最適化します。</li><li>開発専用のコードを削除します。</li><li>htmlcompressor を使って HTML を縮小化し、構成します。</li><li>インテリジェントなキャッシングを行えるように、ファイル名を変更します (具体的には、更新されたファイルのキャッシュを破棄します)。</li></ul></blockquote><p>とのこと。<br>ANTについては別記事に。</p><h2 id="余分な豆知識"><a href="#余分な豆知識" class="headerlink" title="余分な豆知識"></a>余分な豆知識</h2><p>Boilerplateは定型文という意味。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.ibm.com/developerworks/jp/web/library/wa-html5boilerplate/index.html" target="_blank" rel="noopener">HTML5 Boilerplate を使用して Web 開発を容易に始める byIBM</a><br><a href="https://github.com/h5bp/html5-boilerplate" target="_blank" rel="noopener">HTML5 BoilerplateのGitHubページ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初めに&quot;&gt;&lt;a href=&quot;#初めに&quot; class=&quot;headerlink&quot; title=&quot;初めに&quot;&gt;&lt;/a&gt;初めに&lt;/h1&gt;&lt;p&gt;HTML5 Boilerplateは，必要なファイル一式が詰まったHTML5フレームワークです。&lt;br&gt;チームでの開発では，ファイル構造，基本的な命名規則，使用するライブラリーなどを共有することが多々あります。&lt;br&gt;その一つの回答として，いくつものフレームワークが提案されています。&lt;br&gt;HTML5 Boilerplateはその中でも割と古参のフレームワークであり，カスタマイズ性に優れているとされています。&lt;br&gt;このページでは，一通り作成準備を終わらせるまでを記録します。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ホームページ作成" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/"/>
    
      <category term="HTML5/CSS3" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/HTML5-CSS3/"/>
    
      <category term="ツール" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="HTML5 Boilerplate" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/HTML5-Boilerplate/"/>
    
    
      <category term="HTML5" scheme="https://demskiautio.github.io/demski/tags/HTML5/"/>
    
      <category term="コーディング" scheme="https://demskiautio.github.io/demski/tags/%E3%82%B3%E3%83%BC%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"/>
    
      <category term="Html5Boilerplate" scheme="https://demskiautio.github.io/demski/tags/Html5Boilerplate/"/>
    
      <category term="CSS3" scheme="https://demskiautio.github.io/demski/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Windos10 ショートカットキー</title>
    <link href="https://demskiautio.github.io/demski/2019/05/24/windos10-tips/"/>
    <id>https://demskiautio.github.io/demski/2019/05/24/windos10-tips/</id>
    <published>2019-05-24T10:25:24.000Z</published>
    <updated>2019-10-15T07:32:00.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>最近，マウスよりキーボードだけで色々済ませたほうが楽なことに気付いた。<br>記憶力が乏しいので，よく使いそうなものからメモ。(但し，知ってるのは省略（Ctrl + Cとか）)</p><a id="more"></a><!-- toc --><h3 id="よく使いそうなキー"><a href="#よく使いそうなキー" class="headerlink" title="よく使いそうなキー"></a>よく使いそうなキー</h3><p>Alt系のショートカットキーはあまり知らなかったな。<br>あと，Windowsキーが邪魔者扱いから便利ボタンに変わるってのはうれしいなｗ</p><table><thead><tr><th align="left">キー</th><th align="center">動作</th></tr></thead><tbody><tr><td align="left">Alt + Tab</td><td align="center">開いているアプリを切り替える</td></tr><tr><td align="left">Alt + F4</td><td align="center">アクティブなアイテムを閉じる，またはアクティブなアプリを終了する</td></tr><tr><td align="left">Alt + Tab</td><td align="center">開いているアプリを切り替える</td></tr><tr><td align="left">Alt + Esc</td><td align="center">アイテムを開かれた順序で順番に切り替える</td></tr><tr><td align="left">Alt + Enter</td><td align="center">選択したアイテムのプロパティを表示す</td></tr><tr><td align="left">Alt + ← or Alt + →</td><td align="center">前に戻る or 次に進む</td></tr><tr><td align="left">Alt + PageUp or Alt + PageDown</td><td align="center">1 画面上へ移動する or 1 画面下へ移動する</td></tr><tr><td align="left">F3</td><td align="center">エクスプローラーでファイルまたはフォルダーを検索する</td></tr><tr><td align="left">F4</td><td align="center">エクスプローラーでアドレス バーの一覧を表示する</td></tr><tr><td align="left">F5</td><td align="center">作業中のウィンドウを最新の情報に更新する</td></tr><tr><td align="left">F6</td><td align="center">ウィンドウ内またはデスクトップ上の画面要素を順番に切り替える</td></tr><tr><td align="left">F10</td><td align="center">アクティブなアプリのメニュー バーをアクティブにする</td></tr><tr><td align="left">Ctrl + F4</td><td align="center">作業中のドキュメントを閉じる (複数のドキュメントを同時に開くことができる全画面表示のアプリで)</td></tr><tr><td align="left">Ctrl + A</td><td align="center">ドキュメント内またはウィンドウ内のすべてのアイテムを選択する</td></tr><tr><td align="left">Ctrl + R</td><td align="center">作業中のウィンドウを最新の情報に更新する(F5と同等))</td></tr><tr><td align="left">Ctrl + →</td><td align="center">次の単語の先頭にカーソルを移動する</td></tr><tr><td align="left">Ctrl + ←</td><td align="center">前の単語の先頭にカーソルを移動する</td></tr><tr><td align="left">Ctrl + ↓</td><td align="center">次の段落の先頭にカーソルを移動する</td></tr><tr><td align="left">Ctrl + ↑</td><td align="center">前の段落の先頭にカーソルを移動する</td></tr><tr><td align="left">Ctrl + Alt + Tab</td><td align="center">方向キーを使って，開いているすべてのアプリ間で切り替える</td></tr><tr><td align="left">Ctrl + Alt + Shift + 方向キー</td><td align="center">スタート メニュー内でフォーカスされているグループまたはタイルを指定した方向に移動します。</td></tr><tr><td align="left">Ctrl + 方向キー (アイテムに移動する) + Space</td><td align="center">ウィンドウ内またはデスクトップ上の複数のアイテムを個別に選択する</td></tr><tr><td align="left">Ctrl + Shift + 方向キー</td><td align="center">テキストのブロックを選択する</td></tr><tr><td align="left">Ctrl + Esc</td><td align="center">スタート メニューを開く</td></tr><tr><td align="left">Ctrl + Shift + Esc</td><td align="center">タスク マネージャーを開く</td></tr><tr><td align="left">Ctrl + Shift</td><td align="center">キーボード レイアウトを切り替える (複数のキーボード レイアウトが使用可能になっている場合)</td></tr><tr><td align="left">Windows ロゴ キー + D</td><td align="center">デスクトップを表示または非表示にする</td></tr><tr><td align="left">Windows ロゴ キー + Ctrl + D</td><td align="center">仮想デスクトップを追加する</td></tr><tr><td align="left">Windows ロゴ キー + E</td><td align="center">エクスプローラーを開く</td></tr><tr><td align="left">Windows ロゴ キー + L</td><td align="center">PC をロックする，またはアカウントを切り替える</td></tr><tr><td align="left">Windows ロゴ キー + M</td><td align="center">すべてのウィンドウを最小化する</td></tr><tr><td align="left">Windows ロゴ キー + T</td><td align="center">タスク バー上のアプリを順番に切り替える</td></tr><tr><td align="left">Windows ロゴ キー + X</td><td align="center">[クイック リンク] メニューを開く</td></tr><tr><td align="left">Windows ロゴ キー + Tab</td><td align="center">タスク ビューを開く</td></tr><tr><td align="left">Windows ロゴ キー + 矢印キー</td><td align="center">グリッドに分割</td></tr></tbody></table><h3 id="エクスプローラのショートカット"><a href="#エクスプローラのショートカット" class="headerlink" title="エクスプローラのショートカット"></a>エクスプローラのショートカット</h3><table><thead><tr><th align="left">キー</th><th align="center">動作</th></tr></thead><tbody><tr><td align="left">Alt + D</td><td align="center">アドレス バーを選択する</td></tr><tr><td align="left">Ctrl + E</td><td align="center">検索ボックスを選択する</td></tr><tr><td align="left">Ctrl + F</td><td align="center">検索ボックスを選択する</td></tr><tr><td align="left">Ctrl + N</td><td align="center">新しいウィンドウを開く</td></tr><tr><td align="left">Ctrl + W</td><td align="center">現在のウィンドウを閉じる</td></tr><tr><td align="left">Ctrl + マウスのスクロール ホイール</td><td align="center">ファイル アイコンとフォルダー アイコンのサイズおよび外観を変更する</td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="center">選択したフォルダーの上のフォルダーをすべて表示する</td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="center">新しいフォルダーを作成する</td></tr><tr><td align="left">NumLock + アスタリスク (*)</td><td align="center">選択したフォルダーの下のサブフォルダーをすべて表示する</td></tr><tr><td align="left">NumLock + 正符号 (+)</td><td align="center">選択したフォルダーの内容を表示する</td></tr><tr><td align="left">NumLock + 負符号 (-)</td><td align="center">選択したフォルダーを折りたたむ</td></tr><tr><td align="left">Alt + P</td><td align="center">プレビュー ウィンドウを表示する</td></tr><tr><td align="left">Alt + Enter</td><td align="center">選択したアイテムの [プロパティ] ダイアログ ボックスを開く</td></tr><tr><td align="left">Alt + →</td><td align="center">次のフォルダーを表示する</td></tr><tr><td align="left">Alt + ↑</td><td align="center">フォルダーの親フォルダーを表示する</td></tr><tr><td align="left">Alt + ←</td><td align="center">前のフォルダーを表示する</td></tr><tr><td align="left">BackSpace</td><td align="center">前のフォルダーを表示する</td></tr><tr><td align="left">→</td><td align="center">現在の選択を表示する (折りたたまれている場合)，または最初のサブフォルダーを選択する</td></tr><tr><td align="left">←</td><td align="center">現在の選択を折りたたむ (展開されている場合)，またはフォルダーの親フォルダーを選択する</td></tr><tr><td align="left">End</td><td align="center">作業中のウィンドウの一番下を表示する</td></tr><tr><td align="left">Home</td><td align="center">作業中のウィンドウの一番上を表示する</td></tr><tr><td align="left">F11</td><td align="center">作業中のウィンドウを最大化または最小化する</td></tr></tbody></table><h3 id="おまけ"><a href="#おまけ" class="headerlink" title="おまけ"></a>おまけ</h3><p>Windows10デュアルディスプレイの壁紙を別々に設定する方法</p><p>エクスプローラに</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">control /name Microsoft.Personalization /page pageWallpaper</span><br></pre></td></tr></table></figure><p>と打つ。</p><h3 id="おまけ２"><a href="#おまけ２" class="headerlink" title="おまけ２"></a>おまけ２</h3><p>2019-10-15追記<br>Windows10の付箋（Sticky Notes）の起動方法と使い方  </p><p>タスクバーを右クリックします。</p><p>［Windows Ink ワークスペースボタンを表示］をクリックしてチェックをオンにします。</p><p>既定ではオフになっています。<br>まぁ、改めて記事書きます。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;最近，マウスよりキーボードだけで色々済ませたほうが楽なことに気付いた。&lt;br&gt;記憶力が乏しいので，よく使いそうなものからメモ。(但し，知ってるのは省略（Ctrl + Cとか）)&lt;/p&gt;
    
    </summary>
    
    
      <category term="Windos" scheme="https://demskiautio.github.io/demski/categories/Windos/"/>
    
      <category term="Windos10" scheme="https://demskiautio.github.io/demski/categories/Windos/Windos10/"/>
    
    
      <category term="Windows10" scheme="https://demskiautio.github.io/demski/tags/Windows10/"/>
    
      <category term="OS" scheme="https://demskiautio.github.io/demski/tags/OS/"/>
    
      <category term="ショートカットキー" scheme="https://demskiautio.github.io/demski/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%82%AD%E3%83%BC/"/>
    
      <category term="チートシート" scheme="https://demskiautio.github.io/demski/tags/%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88/"/>
    
  </entry>
  
  <entry>
    <title>Css-tips1</title>
    <link href="https://demskiautio.github.io/demski/2019/04/24/css-tips1/"/>
    <id>https://demskiautio.github.io/demski/2019/04/24/css-tips1/</id>
    <published>2019-04-24T08:44:16.000Z</published>
    <updated>2019-05-24T10:20:00.467Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>わかったつもりで実は分かってなかったHTML５の基礎知識を纏めたメモ。<br>今回は，結構罠に嵌まる確率が高いmargin・paddingについてまとめてみた。</p><a id="more"></a><!--toc--><h2 id="ボックスモデル"><a href="#ボックスモデル" class="headerlink" title="ボックスモデル"></a>ボックスモデル</h2><p>HTML5と言うと，HTMLのバージョンとしてのHTML5(狭い意味)と，Javascriptを初めとしたWeb技術としてのHTML5(広い意味)がある。<br>今回は前者の意味でHTML5という言葉を用いている。<br>というのも，HTML5ではセマンティクスの観点からHTMLは文章構造・意味を表すのを担い，デザイン部分はCSS3(以下CSS)が担うという風に，明確に区別が定義されるようになった。(らしい…)<br>ボックスモデルは文章の構造・意味的な部分よりもデザイン的な部分が大きい為，CSSが担うことになった。<br>その事を端的に表しているのが「display」プロパティ。<br>この要素は[ブロック・インライン等の、要素の表示形式を指定する際に使用」される。<br>つまり，HTML5の殆どのタグが，自由にブロック・インラインどちらかのボックスに変えることが出来る。<br><a href="http://www.d-toybox.com/spec/CSS3/box/index.html#L706" target="_blank" rel="noopener">http://www.d-toybox.com/spec/CSS3/box/index.html#L706</a></p><p>ただ，ブラウザの仕様上，特に指定がない場合はHTML4時代の名残としてp要素はブロックレベルでa要素はインラインレベルでというように(ブラウザが判断して)表示されるようです。</p><h2 id="ボックスモデル配置の大前提"><a href="#ボックスモデル配置の大前提" class="headerlink" title="ボックスモデル配置の大前提"></a>ボックスモデル配置の大前提</h2><h3 id="ボックスの構成要素"><a href="#ボックスの構成要素" class="headerlink" title="ボックスの構成要素"></a>ボックスの構成要素</h3><p>要素が宣言されると，ブラウザは次の部品を構成する。</p><ul><li>内容（コンテンツ）</li><li>ボーダー（border）</li><li>内容とボーダーの間の余白（padding）</li><li>ボーダーと他のボックスとの間の余白（margin）</li></ul><p>これは，ブロック・インラインともに共通している。<br>但し，インライン要素の場合は，width や height，上下の margin は効かない。<br>これは，インライン要素はあくまでも内容の中の一部に過ぎないから</p><h3 id="包含ブロック"><a href="#包含ブロック" class="headerlink" title="包含ブロック"></a>包含ブロック</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">p</span>&gt;</span><br><span class="line">        <span class="selector-tag">hoge</span></span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>  <p>内容の配置は，親要素のpaddingの内側になる。<br>上記の例だと，p要素はdiv要素のpaddingの内側になる。<br>そして、p要素の内容であるhogeは，p要素のpaddingの内側となる。<br>このpaddingの内側は，「包含プロック(又はコンテナブロック)」とよばれる。<br>ボックスの配置は，祖先・親要素の内容(コンテンツ)内になる。<br>必ずしも親要素内とは限らないので注意が必要。<br>例えば，「position:static」以外を指定すると，親要素と子要素の関係が変化する。(詳しくは別の機会に)<br>簡単に書くと，親要素に「static」以外が指定されていると，その親要素が基準となりボックスが配置される。</p><h2 id="ボックスの配置"><a href="#ボックスの配置" class="headerlink" title="ボックスの配置"></a>ボックスの配置</h2><p>ボックスの配置は，ブロックボックスとインラインボックスの2つに分けられる。<br>ブロックボックスは「個々の独立したかたまり」を意味する。<br>そして，その塊は下へ下へと配置されていく。<br>例えエディタ上でp要素が横に並んでいても，ブラウザ上では段落が分けられて表示される。</p><p>一方のインラインボックスは「行の一部」として表示される。<br>例えば，エディタでa要素とa要素の間を改行で区切っても，ブラウザ上では横に並んで表示される。</p><h2 id="marginの相殺"><a href="#marginの相殺" class="headerlink" title="marginの相殺"></a>marginの相殺</h2><p>marginの相殺は，</p><ul><li>上下に隣り合ってるボックス同士</li><li>入れ子関係にあるボックス同士(但し，間にboder,paddingがない場合)</li></ul><p>の間で起こる。<br>相殺が起こった場合，大きい方の数値が採用される。<br>相殺を回避するには，boder,paddingを設定するか，overflow:hidden　を設定する。<br>また，floatを設定した場合も相殺は起こらない。</p><h2 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h2><p><a href="http://momdo.s35.xrea.com/web-html-test/CSS3-ja/" target="_blank" rel="noopener">CSS3の日本語訳集</a><br><a href="http://jtdan.com/spec/" target="_blank" rel="noopener">W3C仕様書などのまとめ【保存版】</a><br><a href="https://developer.mozilla.org/ja/docs/Web/HTML/Block-level_elements" target="_blank" rel="noopener">MDN web docs:ブロックレベル要素</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;わかったつもりで実は分かってなかったHTML５の基礎知識を纏めたメモ。&lt;br&gt;今回は，結構罠に嵌まる確率が高いmargin・paddingについてまとめてみた。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ホームページ作成" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/"/>
    
      <category term="CSS" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/CSS/"/>
    
    
      <category term="HTML5" scheme="https://demskiautio.github.io/demski/tags/HTML5/"/>
    
      <category term="html" scheme="https://demskiautio.github.io/demski/tags/html/"/>
    
      <category term="css" scheme="https://demskiautio.github.io/demski/tags/css/"/>
    
      <category term="tips" scheme="https://demskiautio.github.io/demski/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>WindowsでGitを使う　～GitHub登録まで</title>
    <link href="https://demskiautio.github.io/demski/2019/03/24/git1/"/>
    <id>https://demskiautio.github.io/demski/2019/03/24/git1/</id>
    <published>2019-03-24T09:01:27.000Z</published>
    <updated>2019-05-24T10:18:44.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>バージョン管理ツールであるGitをインストールして，GitHubと連携させるまでのメモ</p><a id="more"></a><!--toc--><h2 id="Gitとは？"><a href="#Gitとは？" class="headerlink" title="Gitとは？"></a>Gitとは？</h2><p>分散型バージョン管理システムの一つで,もともとLinuxのソースコードを効果的に管理するために開発されたそうです。<br>好きなタイミングで保存し，また好きなときに前の状態に戻せたりできます。まぁ，バックアップ管理みたいなもの。</p><h2 id="GitHubとは？"><a href="#GitHubとは？" class="headerlink" title="GitHubとは？"></a>GitHubとは？</h2><p>Gitバージョン管理システムを使用したソフトウェア開発プロジェクトのための共有ウェブサービス。<br>公式HPで簡単に登録でき,基本的には無料で使える。<br>無料で公開リポジトリ(誰でも見れる状態)が５つ作れる。<br>有料オプションで非公開リポジトリやリポジトリの数が増える。</p><p><a href="https://github.com/" title="GitHub" target="_blank" rel="noopener">GitHub</a></p><h2 id="git-for-windowsとは？"><a href="#git-for-windowsとは？" class="headerlink" title="git for windowsとは？"></a>git for windowsとは？</h2><p>GitをWindowsで扱えるようにしたパッケージ。<br>公式HPからダウンロード。それをインストールするだけで使えるようになる。<br><a href="https://gitforwindows.org/" title="Git for windows" target="_blank" rel="noopener">git for windows</a></p><h3 id="インストール中のオプションについて"><a href="#インストール中のオプションについて" class="headerlink" title="インストール中のオプションについて"></a>インストール中のオプションについて</h3><p>いくつか聞かれるので下記を参考にインストール。  </p><ul><li>Select Components (コンポーネントの選択)</li></ul><blockquote><p>・Additional icons<br>┠ In the Quick Launch<br>┗ On the Desktop<br>→ショートカットアイコンを作成。デスクトップとクイック起動を選べる<br>・Windows Explorer integration<br>┠ Simple context menu (Registry based)<br>┃┠ Git Bash Here<br>┃┗ Git GUI Here<br>┗ Advanced context menu (git-cheetah plugin)<br>→ エクスプローラのコンテキストメニューにGitコマンドメニューを追加する<br>・Associate .git* configuration files with the default text editor<br>→ gitファイルをGit Bash上で実行するように関連付けする<br>・Associate .sh files to be run with Bash<br>→ シェルスクリプトファイルをGit Bash上で実行するように関連付けする<br>・Use a TruType font in all console windows (not only for Git Bash)<br>→ コマンドプロンプトで TrueType フォントを利用する設定。文字化けするので外す</p></blockquote><ul><li>Adjusting your PATH environment (環境変数PATHの設定)</li></ul><blockquote><p>・Use Git Bash only<br>→ 環境変数PATHの変更はなし<br>・Run Git from the Windows Command Prompt<br>→ 環境変数PATHにGITが追加される<br>・Run Git and included Unix tools from the Windows Command Prompt<br>→ GitとUnix toolsの両方が環境変数PATHに追加される。<br>find.exeやsort.exeなどのWindowsツールを上書きするので注意。</p></blockquote><ul><li>Configuring the line ending conversions (改行コードの変換の選択)</li></ul><blockquote><p>・Checkout Windows-style, commit Unix-style line endings<br>→ チェックアウト時にLFをCRLFに変換，コミット時にCRLFをLFに変換。<br>Windows上でのクロスプラットフォームプロジェクトではこれが推奨(“core.autocrlf”がtrue)。</p></blockquote><blockquote><p>・Checkout as-is, commit Unix-style line endings<br>→ チェックアウト時は変換なし，コミット時はCRLFをLFに変換。<br>Unix上でのクロスプラットフォームプロジェクトではこれが推奨(“core.autocrlf”がinput)。</p></blockquote><blockquote><p>・Checkout as-is, commit as-is<br>→ チェックアウト時，コミット時ともに改行コードの変換なし。<br>クロスプラットフォームのプロジェクトではではお勧めしない(“core.autocrlf”がfalse)。</p></blockquote><h2 id="初期設定：config"><a href="#初期設定：config" class="headerlink" title="初期設定：config"></a>初期設定：config</h2><p>初期設定として次のコマンドを叩き,ユーザー名とemailを登録する</p><h3 id="ユーザー名"><a href="#ユーザー名" class="headerlink" title="ユーザー名"></a>ユーザー名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;User name&quot;</span><br></pre></td></tr></table></figure><h3 id="メール"><a href="#メール" class="headerlink" title="メール"></a>メール</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.email &quot;E-mail&quot;</span><br></pre></td></tr></table></figure><h2 id="sshキーの登録"><a href="#sshキーの登録" class="headerlink" title="sshキーの登録"></a>sshキーの登録</h2><p>ローカルからGitHubにpushする際，接続するために必要となる公開鍵を生成し登録。<br>Git Bashを起動して次のコマンドを打ち込んでいく。  </p><ul><li>すでにsshキーがあるか確認</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls ~/.ssh</span><br></pre></td></tr></table></figure><ul><li><p>「id_rsa」「id_rsa.pub」があれば,それを使う。無いなら生成する</p></li><li><p>キーの生成</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>実行すると色々聞かれるが，すべて空白のままでよい。<br>生成されたファイルのうち「id_rsa.pub」をメモ帳などで開き，その内容をクリップボードにコピー。<br>githubのサイトで「setting→SSH Keys」でペースト。<br>初回のみ相手のサーバーを確認する作業がありますので，いちど試しに接続してみる。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;バージョン管理ツールであるGitをインストールして，GitHubと連携させるまでのメモ&lt;/p&gt;
    
    </summary>
    
    
      <category term="ホームページ作成" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/"/>
    
      <category term="Git" scheme="https://demskiautio.github.io/demski/categories/Git/"/>
    
      <category term="ツール" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="GitHub" scheme="https://demskiautio.github.io/demski/categories/Git/GitHub/"/>
    
      <category term="Git" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/%E3%83%84%E3%83%BC%E3%83%AB/Git/"/>
    
    
      <category term="ツール" scheme="https://demskiautio.github.io/demski/tags/%E3%83%84%E3%83%BC%E3%83%AB/"/>
    
      <category term="git" scheme="https://demskiautio.github.io/demski/tags/git/"/>
    
      <category term="github" scheme="https://demskiautio.github.io/demski/tags/github/"/>
    
      <category term="windows10" scheme="https://demskiautio.github.io/demski/tags/windows10/"/>
    
  </entry>
  
  <entry>
    <title>Javascrpt 変数の巻き上げ</title>
    <link href="https://demskiautio.github.io/demski/2018/12/25/javascrpt-theory1/"/>
    <id>https://demskiautio.github.io/demski/2018/12/25/javascrpt-theory1/</id>
    <published>2018-12-25T11:55:21.000Z</published>
    <updated>2019-06-14T10:40:15.662Z</updated>
    
    <content type="html"><![CDATA[<h2 id="はじめに"><a href="#はじめに" class="headerlink" title="はじめに"></a>はじめに</h2><p>javascrptの重要な概念の一つ，「変数の巻き上げ(hoisting)」についてのまとめ。<br>javascrpt特有で最重要ポイントの一つ。<br>これを分かってると，コードの読み方が一歩プロに近づく…カモ</p><a id="more"></a><!--toc--><h2 id="大前提１-グローバル変数とローカル変数"><a href="#大前提１-グローバル変数とローカル変数" class="headerlink" title="大前提１ グローバル変数とローカル変数"></a>大前提１ グローバル変数とローカル変数</h2><p>まずは，基礎中の基礎，「グローバル変数」と「ローカル変数」について。  </p><figure class="codeblock codeblock--tabbed"><figcaption><span>変数</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shaver = <span class="string">'松本イズミ'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(shaver);</span><br><span class="line">    <span class="keyword">var</span> imo = <span class="string">'松本いずみ'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(imo);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">show();</span><br><span class="line"><span class="built_in">console</span>.log(shaver);</span><br><span class="line"><span class="built_in">console</span>.log(imo);</span><br></pre></td></tr></tbody></table></figure></div></figure><p>これを実行すると</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">松本イズミ</span><br><span class="line">松本いずみ</span><br><span class="line">松本イズミ</span><br><span class="line">Uncaught ReferenceError: imo is not defined</span><br></pre></td></tr></table></figure><p>と表示されます。<br>最後が「imo is not defined」となってます。<br>これは，変数imoこと「松本いずみ」はローカル変数だから。<br>つまり，変数imoは関数show()の中でしか使えないということ。<br>逆に，変数shaverこと「松本イズミ」はグローバル変数なので，関数show内でも外でも使えます。当然，新しく作った関数内でも使えます。</p><h2 id="本題1-変数の巻き上げ"><a href="#本題1-変数の巻き上げ" class="headerlink" title="本題1 変数の巻き上げ"></a>本題1 変数の巻き上げ</h2><p>さて，ここからが本題です。<br>まずは，コードを見てみます。</p><figure class="codeblock codeblock--tabbed"><figcaption><span>hoisting</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> izumi = <span class="string">'松本イズミ'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>{</span><br><span class="line">    cosole.log(izumi);</span><br><span class="line">    <span class="keyword">var</span> izumi = <span class="string">'松本いずみ'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(izumi);</span><br><span class="line">}</span><br><span class="line">show();</span><br></pre></td></tr></tbody></table></figure></div></figure><p>コンソールにどのように表示されるでしょうか？  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">松本イズミ</span><br><span class="line">松本いずみ</span><br></pre></td></tr></table></figure><p>と思った人は不正解。<br>正解は</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined</span><br><span class="line">松本いずみ</span><br></pre></td></tr></table></figure><h2 id="本題2-巻き上げの正体"><a href="#本題2-巻き上げの正体" class="headerlink" title="本題2 巻き上げの正体"></a>本題2 巻き上げの正体</h2><p>Javascrptでは，関数内のどこでもvar宣言で変数を定義できる。<br>しかし，実行時にはその変数は関数の先頭で宣言されたものと同じ扱いになる。<br>つまり，以下のコードと同等となる。</p><figure class="codeblock codeblock--tabbed"><figcaption><span>hoisting</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> izumi = <span class="string">'松本イズミ'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> izumi; <span class="comment">//undefined</span></span><br><span class="line">    cosole.log(izumi);</span><br><span class="line">    <span class="keyword">var</span> izumi = <span class="string">'松本いずみ'</span>;</span><br><span class="line">    cosole.log(izumi); <span class="comment">//松本いずみ</span></span><br><span class="line">}</span><br><span class="line">show();</span><br></pre></td></tr></tbody></table></figure></div></figure><p>グローバル変数のでて定義した「松本イズミ」は，関数内で巻き上げられた[var izumi;]に上書きされちゃうんですね。<br>結果，表示されるのは「undefined」になると。<br>なぜ，このような仕様になってるのかというと，結構複雑な事情があるみたい。<br>次回，さらに掘り下げてみます。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://analogic.jp/hoisting/" title="ANALOGIC" target="_blank" rel="noopener">知らないと怖い「変数の巻き上げ」とは？</a><br><a href="http://qiita.com/39_isao/items/d9d80e98b5bd1938bc1d" target="_blank" rel="noopener">やっとわかったjsの「巻き上げ」</a>  </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;はじめに&quot;&gt;&lt;a href=&quot;#はじめに&quot; class=&quot;headerlink&quot; title=&quot;はじめに&quot;&gt;&lt;/a&gt;はじめに&lt;/h2&gt;&lt;p&gt;javascrptの重要な概念の一つ，「変数の巻き上げ(hoisting)」についてのまとめ。&lt;br&gt;javascrpt特有で最重要ポイントの一つ。&lt;br&gt;これを分かってると，コードの読み方が一歩プロに近づく…カモ&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="プログラミング" scheme="https://demskiautio.github.io/demski/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="JavaScript" scheme="https://demskiautio.github.io/demski/tags/JavaScript/"/>
    
      <category term="基礎" scheme="https://demskiautio.github.io/demski/tags/%E5%9F%BA%E7%A4%8E/"/>
    
      <category term="theory" scheme="https://demskiautio.github.io/demski/tags/theory/"/>
    
  </entry>
  
  <entry>
    <title>浮動小数点</title>
    <link href="https://demskiautio.github.io/demski/2016/04/04/floating-point/"/>
    <id>https://demskiautio.github.io/demski/2016/04/04/floating-point/</id>
    <published>2016-04-04T09:28:07.000Z</published>
    <updated>2019-05-23T10:02:55.621Z</updated>
    
    <content type="html"><![CDATA[<p>Javascriptの勉強をし直しているので，分かってなかったことなんかをメモしています。<br>今回は，数値計算とかでよく出てくる浮動小数点について調べてみました。  </p><a id="more"></a><p>Mozillaの<a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript" target="_blank" rel="noopener">MDN Javascript再入門</a><br>によると，</p><blockquote><p>JavaScript における数値は，仕様によると「倍精度 64 ビットフォーマット IEEE 754 値 (double-precision 64-bit format IEEE 754 values)」です。</p></blockquote><p>と，いきなり難しいことを言ってきます…。<br>ということで，以下に調べてみた結果をメモ。</p><!-- toc --><h2 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h2><p>IEEE＝「Institute of Electrical and Electronics Engineers＝米国電気電子技術者協会」の略。<br>IEEEは電気工学を源流とする通信・電子・情報工学とその関連分野の学会であり，事実上コンピューターの色々な仕様の世界標準決定機関です。<br>で，「IEEE754」は，この学会が取り決めた「 浮動小数点演算に関する標準規格」です。</p><h2 id="不動小数点とは"><a href="#不動小数点とは" class="headerlink" title="不動小数点とは"></a>不動小数点とは</h2><p>コンピューターは厳密には「0」と「1」で構成される2進数しか扱えません。<br>そこで，(小数点を含む)整数を表すのに特別な方法が必要となってきます。  </p><p>小数点を表すには固定小数点数と浮動小数点数があります。<br>固定小数点とは，普段よく目にする「3.1424,,,,,」のように表現すること。<br>この方式ではコンピューターが理解することができません。  </p><p>一方，不動小数点では「指数形式(○○×△△の□□乗)」という形で表します。<br>具体的には，「3.14」を表すのに「31.4×10－1，314.0×10－2，3.14×100，31.4×10－1，314.0×10－2,,,」と色んな形で表現することができます。<br>表現する形が多いということは，コンピューターやソフトを作るときに作り手が好き勝手に決められることになります。<br>ところが，それでは互換性とかの問題で扱いにくいのでIEEEが基準を示し，作り手がそれを採用して互換性を保つようになりました。</p><p>ということで，以下はIEEE745に沿った浮動小数点です。</p><h2 id="IEEE-754における浮動小数点"><a href="#IEEE-754における浮動小数点" class="headerlink" title="IEEE 754における浮動小数点"></a>IEEE 754における浮動小数点</h2><p>浮動小数点で表現するのに，指数形式を部分的に分けて使います。<br>「○○×△△の□□乗」は</p><ul><li>○○を仮数部(符号)</li><li>△△を基数部</li><li>□□乗を指数部</li></ul><p>と呼びます。<br>そして，求められる計算精度とデータ容量の問題を考慮して以下の2つの形式が定められています。</p><ul><li>半精度浮動小数点数では，符号部 1 ビット ・ 指数部 5 ビット ・ 仮数部 10 ビット =16ビット</li><li>単精度浮動小数点数では，符号部 1 ビット ・ 指数部 8 ビット ・ 仮数部 23 ビット =32ビット</li><li>倍精度浮動小数点数では，符号部 1 ビット ・ 指数部 11 ビット ・ 仮数部 52 ビット =64ビット</li><li>四倍精度浮動小数点数では，符号部 1 ビット ・ 指数部 15 ビット ・ 仮数部 112 ビット=127ビット</li></ul><p>として扱います。<br>最近よく言われる「32bit版Windows10」「64bit版Windows10」といのは，ここに由来しています。<br>さらに，</p><ul><li>符号部は「正の値なら0」,「 負の値なら1」とする。</li><li>仮数部は，整数部分が 1 であるような2進小数の小数部分（ケチ表現）を表す。</li><li>指数部は，符号なし2進整数とし，半精度では 15，単精度では 127，倍精度では 1023，四倍精度では 16383 のゲタを履かせたゲタ履き表現で表す。</li></ul><h2 id="固定小数点を浮動小数点に変換"><a href="#固定小数点を浮動小数点に変換" class="headerlink" title="固定小数点を浮動小数点に変換"></a>固定小数点を浮動小数点に変換</h2><p>実際に単精度で「3.25」を浮動小数点に変換してみます。</p><h3 id="10進数から2進数"><a href="#10進数から2進数" class="headerlink" title="10進数から2進数"></a>10進数から2進数</h3><p>10進数を整数と小数点以下の2つに分けます。<br>理由は，それぞれ2進数に直す方法が異なるから。<br>整数はひたすら2で割りその余りを出します。<br>3を2進数にすると，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3/2→1余り1</span><br><span class="line">1/2→0余り1</span><br></pre></td></tr></table></figure><p>並びは下からなので，答えは「11」となります。</p><p>続いて小数点以下を2進数にします。<br>方法は10進数の小数部を2倍して商を求めます。<br>商の小数部を繰り返し2倍していき，その整数部が2進数になります。<br>つまり，「0.25」を計算すると</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">0.25*2→0.5 整数部0</span><br><span class="line">0.5*2→1 整数部1</span><br></pre></td></tr></table></figure><p>並びは整数とは逆で上から読むので，答えは「01」となります。<br>よって，「3.25」の2進数は「11.01」となります。</p><h3 id="2進数を「1-◯◯×2-△」にする"><a href="#2進数を「1-◯◯×2-△」にする" class="headerlink" title="2進数を「1.◯◯×2^△」にする"></a>2進数を「1.◯◯×2^△」にする</h3><ul><li>符号は正の数なので「0」。</li><li>指数は2に小数点を動かした桁と同数に127(単精度)を足すので，「1+127＝128」とります。  </li></ul><p>128を2進数に直すと</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">128/2→64余り0</span><br><span class="line">64/2→32余り0</span><br><span class="line">32/2→16余り0</span><br><span class="line">16/2→8余り0</span><br><span class="line">8/2→4余り0</span><br><span class="line">4/2→2余り0</span><br><span class="line">2/2→1余り0</span><br><span class="line">1/2→0余り1</span><br></pre></td></tr></table></figure><p>よって答えは「1000 0000」。</p><p>仮数は整数部が「1」固定の2進数になるように小数点を左に移動するので，<code>1.101</code>。  これを「正規化」といいます。<br>仮数は23ビット(単精度)で小数点より右側だけなので，足りない分を0でうめて<code>101000000000 00000000000</code>。</p><p>浮動小数点は符号，指数，仮数を合わせて<code>01000000010100000000000000000000</code>となります。<br>以上で，「3.25」を32bitの浮動小数点に変換できました。</p><h2 id="Javascriptでは……"><a href="#Javascriptでは……" class="headerlink" title="Javascriptでは……"></a>Javascriptでは……</h2><p>冒頭のJavascriptの「数値」の扱いの仕様に戻ると「倍精度 64 ビットフォーマット」で扱うとなってます。<br>ところが，読み進めると</p><blockquote><p>実のところ，整数値は 32 ビット int 型として扱われます。また一部の実装では，32 ビット整数値ではなく Number で有効な命令の実行を求められるまでの間，32 ビット整数値として保存します。これはビット演算を行う際に重要なことです。</p></blockquote><p>とあります。<br>よくわかりません。^^;<br>とりあえず，長くなったので項目を改めます。</p><h2 id="参照サイト"><a href="#参照サイト" class="headerlink" title="参照サイト"></a>参照サイト</h2><p><a href="http://itpro.nikkeibp.co.jp/members/ITPro/ITBASIC/20020624/" title="１週間で学ぶIT基礎の基礎" target="_blank" rel="noopener">ITpro『【5分で覚えるIT基礎の基礎】ゼロから学ぶ2進数　第4回』</a><br><a href="http://dangerous-animal141.hatenablog.com/entry/2014/05/10/000000" title="動小数点数について本気出して考えてみた" target="_blank" rel="noopener">一から勉強させてください(￣ω￣;)</a><br><a href="https://developer.mozilla.org/ja/docs/Web/JavaScript/A_re-introduction_to_JavaScript" title="Javascript再入門" target="_blank" rel="noopener">MDN Javascript再入門</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Javascriptの勉強をし直しているので，分かってなかったことなんかをメモしています。&lt;br&gt;今回は，数値計算とかでよく出てくる浮動小数点について調べてみました。  &lt;/p&gt;
    
    </summary>
    
    
      <category term="コンピュータ" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF/"/>
    
      <category term="プログラミング" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="数学" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="プログラミング" scheme="https://demskiautio.github.io/demski/tags/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0/"/>
    
      <category term="Javascript" scheme="https://demskiautio.github.io/demski/tags/Javascript/"/>
    
      <category term="数値" scheme="https://demskiautio.github.io/demski/tags/%E6%95%B0%E5%80%A4/"/>
    
      <category term="数学" scheme="https://demskiautio.github.io/demski/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Stylishを使ってGoogleに月島ほろちゃんを召喚しよう by FireFox</title>
    <link href="https://demskiautio.github.io/demski/2016/02/14/horo/"/>
    <id>https://demskiautio.github.io/demski/2016/02/14/horo/</id>
    <published>2016-02-14T12:08:10.000Z</published>
    <updated>2019-05-25T05:11:23.997Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>FireFoxのプラグイン「Stylish」を利用して，Googleの検索画面に月島ほろちゃんを召喚しようという計画です。<br>「Stylish」の使い方も含め，メモとして残しておきます。</p><a id="more"></a><div class="figure fig-25" style="width:100%;"><a class="fancybox" href="horo.png" title="月島ほろ01" data-caption="月島ほろ01" data-fancybox="default"><img class="fig-img" src="horo.png" style="width:100%;height:100%;" alt="月島ほろ01"></a><span class="caption">月島ほろ01</span></div><div style="clear:both;"></div><div class="figure fig-25" style="width:100%;"><a class="fancybox" href="horo2.png" title="月島ほろ02" data-caption="月島ほろ02" data-fancybox="default"><img class="fig-img" src="horo2.png" style="width:100%;height:100%;" alt="月島ほろ02"></a><span class="caption">月島ほろ02</span></div><div style="clear:both;"></div><!-- toc --><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>HTML/CSSの予備知識</li><li>Firebugの基本的な使い方</li></ul><h3 id="用意するもの"><a href="#用意するもの" class="headerlink" title="用意するもの"></a>用意するもの</h3><ul><li>FireFox</li><li>Stylish</li><li>背景にしたい画像</li></ul><h2 id="「Stylish」をFireFoxにインストール"><a href="#「Stylish」をFireFoxにインストール" class="headerlink" title="「Stylish」をFireFoxにインストール"></a>「Stylish」をFireFoxにインストール</h2><p>まずは，これが無ければ何も始まらない。<br>ということで，下記でdownload。</p><p><a href="https://www.mozilla.jp" title="FireFox" target="_blank" rel="noopener">FireFox</a><br><a href="https://addons.mozilla.org/ja/firefox/addon/stylish/" title="Stylish" target="_blank" rel="noopener">Stylish :: Add-ons for Firefox </a>  </p><p>今回使う「Stylish」は，ブラウザ側に保存された所謂「<strong>ユーザースタイルシート</strong>」を使ってサイトを上書きしています。<br>別に，googleのサイトをハッキングしたりとかはしてるわけではありませんのでご安心を。</p><h2 id="「stylish」の使い方"><a href="#「stylish」の使い方" class="headerlink" title="「stylish」の使い方"></a>「stylish」の使い方</h2><h3 id="Google用のスキンをGet"><a href="#Google用のスキンをGet" class="headerlink" title="Google用のスキンをGet"></a>Google用のスキンをGet</h3><p>まずは，スタイルを書き換えたいサイトを表示しましょう。今回の場合ならGoogleですね。<br>続いて，ステータスバーにあるStylishのアイコンを右クリックして，<strong>「このサイト用のスタイルを探す」</strong> をクリックします。</p><div class="figure fig-50" style="width:;"><a class="fancybox" href="stylish.png" title data-caption data-fancybox="default"><img class="fig-img" src="stylish.png" alt></a></div><div style="clear:both;"></div>  <p>そうすると，<a href="https://userstyles.org/" target="_blank" rel="noopener">userstyles.org</a> というコミュニティーサイトに飛びます。<br>しかも，既に「Google」用に作られたスタイルの検索結果が表示されます。<br>その中の気に入った物をクリックし,詳細を確認（殆ど英語ですが^^;）。<br>ページの右上にある <strong>「Install with Stylish」</strong> をクリックすると，そのスタイルが影響するサイトのURLを確認するアラートの後,ダウンロードされStylishから使えるようになります。<br>見事に書き換えられたら,成功です。</p> <div class="figure fig-50" style="width:100%;"><a class="fancybox" href="stylish_google.png" title="stylish例" data-caption="stylish例" data-fancybox="default"><img class="fig-img" src="stylish_google.png" style="width:100%;height:100%;" alt="stylish例"></a><span class="caption">stylish例</span></div><div style="clear:both;"></div><p> <span style="font-size: 65%">※『google space beer』というスタイルを適用した様子</span></p><p>解除したい時はStylish アイコンのメニューから，当該のテーマ名のチェックを外せば，適用が解除されます。<br>このように既に用意されているスタイルを探して使うだけでも充分楽しめますね。(もちろん，テーマのある他サイトでもOK)</p><h2 id="術式用言語について"><a href="#術式用言語について" class="headerlink" title="術式用言語について"></a>術式用言語について</h2><p>先にも述べたように，「Stylish」はCSSを使ってサイトを上書きしています。<br>CSSは，簡単に述べるとホームページのデザインを定義する言語です。(因みに，HTMLは文章構造を定義しています。)<br>まぁ，この辺りは説明しだすと長いんで，下記に示す参考サイトなり書籍なりGoogle大先生に聞くなりしてください。</p><h4 id="参考サイト"><a href="#参考サイト" class="headerlink" title="参考サイト"></a>参考サイト</h4><ul><li><a href="http://www.tohoho-web.com/" title="とほほのWWW入門" target="_blank" rel="noopener">とほほのWWW入門</a></li><li><a href="http://www.htmq.com/" title="HTMLクイックリファレンス" target="_blank" rel="noopener">HTMLクイックリファレンス</a></li></ul><h3 id="Firebugにつて"><a href="#Firebugにつて" class="headerlink" title="Firebugにつて"></a>Firebugにつて</h3><p>さて，召喚魔法の為の最後の道具は「Firebug」というこれまたFireFoxのアドオンです。</p><p><a href="https://addons.mozilla.org/ja/firefox/addon/firebug/" title="Firebug" target="_blank" rel="noopener">Firebug:: Add-ons for Firefox</a>  </p><p>このアドオンは，FireFoxでWeb開発するうえで，色々な便利機能を追加してくれます。<br>ほかにも，WebDeveloperツールとか色々ありますけど，Firebugが一番有名(＝日本語情報が豊富)なので，今回はこれを使用します。  </p><p>インストールが終わると，ツールバーにハチのアイコンが出てくるのでそれをクリックすれば起動します。<br>すると，ブラウザ内にFirebugeの画面が現れます。<br>通常は右にHTMLのソースが，左にCSSのソース等が表示されると思います。この画面を使ってGoogleさんを分析していきます。  </p><h4 id="参考サイト-1"><a href="#参考サイト-1" class="headerlink" title="参考サイト"></a>参考サイト</h4><ul><li><a href="http://web8bungi.sakura.ne.jp/first/htmlcss/firebug.html" title="Web八分儀" target="_blank" rel="noopener">Web八分儀</a></li></ul><h2 id="GoogleサイトのHTMLを分析"><a href="#GoogleサイトのHTMLを分析" class="headerlink" title="GoogleサイトのHTMLを分析"></a>GoogleサイトのHTMLを分析</h2><p>まずは，Googleのサイトを表示しつつFirebugを起動します。<br>そして，Firebugのハチアイコンの横にある長方形に矢印のあるボタンをクリックします。  </p><div class="figure fig-50" style="width:100%;"><a class="fancybox" href="firebug2.png" title="firebug2" data-caption="firebug2" data-fancybox="default"><img class="fig-img" src="firebug2.png" style="width:100%;height:100%;" alt="firebug2"></a><span class="caption">firebug2</span></div><div style="clear:both;"></div><p>そのままGoogleの画面にカーソルを持ってくると，青い枠で特定のエリアが囲われます。</p><div class="figure fig-50" style="width:100%;"><a class="fancybox" href="google_select.png" title="要素調査" data-caption="要素調査" data-fancybox="default"><img class="fig-img" src="google_select.png" style="width:100%;height:100%;" alt="要素調査"></a><span class="caption">要素調査</span></div><div style="clear:both;"></div><p>それをクリックすれば，「要素」が選ばれ，Firebugの右画面にはその「要素」に関連付けられているCSSが表示されます。<br>このCSSをStylishで上書きしていくわけです。<br>手順としては，変更したい「要素」の「ID」or「class」を調べ，その「ID」or「class」をStylishで上書きしていくという作業になります。</p><h2 id="Stylishで術式を書く"><a href="#Stylishで術式を書く" class="headerlink" title="Stylishで術式を書く"></a>Stylishで術式を書く</h2><p>では，早速書いていきます。<br>Googleさんを表示した状態で，Stylishのアイコンから「新しいスタイルを書く→　このサイト専用」を選びます。<br>すると，下記の「おまじない」が書かれた画面が開くと思います。</p><figure class="highlight css"><figcaption><span>[おまじない] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">namespace</span> url(http://www.w3.org/<span class="number">1999</span>/xhtml);</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">moz</span>-<span class="keyword">document</span> domain(<span class="string">"google.co.jp"</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>この{　}の中にCSSを書いていきます。  </p><p>まず簡単に，下記を入力してみてください。</p><figure class="highlight css"><figcaption><span>[背景色を変更] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">backuground-color</span>: <span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>「保存」または「お試し」を押してみてください。<br>そしてGoogleを見てみると，背景が黒くなっていたら成功です。</p><h2 id="ほろちゃん召喚"><a href="#ほろちゃん召喚" class="headerlink" title="ほろちゃん召喚"></a>ほろちゃん召喚</h2><p>さて，いよいよわれらが「月島ほろ」を呼び出してみたいと思います。<br>まずは，公式ホームページやTwitterから公式画像をダウンロードしましょう。</p><p><del>[月島ほろ公式ホームページ]</del> 活動停止により閉鎖;;</p><p><a href="https://twitter.com/horo_tsukishima" title="月島ほろ公式Twitter" target="_blank" rel="noopener">月島ほろ公式Twitter</a></p><p>画像をダウンロードしたら，PCの任意の場所に保存しましょう。<br>そして，そのまま画像をドロップでブラウザに放り込みます。<br>するとURL欄に次の形式で画像までのルートが記載されます。  </p><figure class="highlight css"><figcaption><span>[背景色を変更] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">file:///ドライブ名:（例 D:）/フォルダ名/画像ファイル名</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>このURLをコピーして，stylishのbodyに次の形式で貼り付けます。</p><figure class="highlight css"><figcaption><span>[背景に画像表示] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:(<span class="string">"コピーしたURL"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>※stylish公式サイトの使用上「background-image」はコメントアウトしてありますので，解除してください。</p><figure class="highlight css"><figcaption><span>[背景色を変更] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="comment">/*background-image: url("コピーしたURL");*/</span>→「<span class="comment">/*」「*/</span>」をとる</span><br><span class="line">→    background-image: url("file:///ドライブ名:（例 D:）/フォルダ名/画像ファイル名");</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>それを保存すれば，Googleへの月島ほろ召喚完了です。<br>ところが，このままでは無限にほろちゃんが呼び出されてしまいます。</p><div class="figure fig-50" style="width:;"><a class="fancybox" href="horo3.png" title data-caption data-fancybox="default"><img class="fig-img" src="horo3.png" alt></a></div><div style="clear:both;"></div>   <p>そこで，次のコードを付け足します。</p><figure class="highlight css"><figcaption><span>[背景画像配置] []</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background-image</span>:(<span class="string">"コピーしたURL"</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-position</span>: right bottom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>これで，ページの右下に固定されて表示されます。  </p><div class="figure fig-50" style="width:100%;"><a class="fancybox" href="horo.png" title="月島ほろ %" data-caption="月島ほろ %" data-fancybox="default"><img class="fig-img" src="horo.png" style="width:100%;height:100%;" alt="月島ほろ %"></a><span class="caption">月島ほろ %</span></div><div style="clear:both;"></div><p>設定によって好きな場所に出現させることができるので，冒頭の参考サイト様を参照に各自設定してみてください。<br>他の要素は，先に述べた通りIDやclassを指定して設定していくのが便利です。  </p><h2 id="まとめ"><a href="#まとめ" class="headerlink" title="まとめ"></a>まとめ</h2><p>Stylishを使うと，簡単にユーザースタイルシートのオン・オフが切り替えられて便利です。<br>HTML/CSSの知識がちょっと必要ですけど，プログラミング言語ほど難しくないので，チャレンジしてみてください。<br>以上で，「Stylishを使ってGoogleに月島ほろを召喚 by FireFox」は終了です。<br>お疲れ様でした。</p><p>※下記に，Topの画像で使ってるCSSを公開しておきます。但し，ソースコードだけで画像は付いてきません。好きな画像を引っ張ってきて設定してください。<br>※CSSの仕様上background-imageのURL欄に他サイトにある画像のURLを入力すると，その画像を背景に使えますが，サーバーの負担や規約違反等になるので絶対にしないでください。</p><p><a href="https://userstyles.org/styles/124293/horo-tsukishima-on-google" target="_blank" rel="noopener">horo_tsukishima on google</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h2&gt;&lt;p&gt;FireFoxのプラグイン「Stylish」を利用して，Googleの検索画面に月島ほろちゃんを召喚しようという計画です。&lt;br&gt;「Stylish」の使い方も含め，メモとして残しておきます。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ホームページ作成" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/"/>
    
      <category term="コンピューターとインターネット" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88/"/>
    
      <category term="Browser" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88/Browser/"/>
    
      <category term="FireFox" scheme="https://demskiautio.github.io/demski/categories/%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%82%BF%E3%83%BC%E3%81%A8%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88/Browser/FireFox/"/>
    
      <category term="css" scheme="https://demskiautio.github.io/demski/categories/%E3%83%9B%E3%83%BC%E3%83%A0%E3%83%9A%E3%83%BC%E3%82%B8%E4%BD%9C%E6%88%90/css/"/>
    
    
      <category term="css" scheme="https://demskiautio.github.io/demski/tags/css/"/>
    
      <category term="月島ほろ" scheme="https://demskiautio.github.io/demski/tags/%E6%9C%88%E5%B3%B6%E3%81%BB%E3%82%8D/"/>
    
      <category term="Stylish" scheme="https://demskiautio.github.io/demski/tags/Stylish/"/>
    
      <category term="web" scheme="https://demskiautio.github.io/demski/tags/web/"/>
    
      <category term="Browser" scheme="https://demskiautio.github.io/demski/tags/Browser/"/>
    
      <category term="FireFox" scheme="https://demskiautio.github.io/demski/tags/FireFox/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://demskiautio.github.io/demski/1970/01/01/ck1rlutyq000fxwtvliowyf8d/"/>
    <id>https://demskiautio.github.io/demski/1970/01/01/ck1rlutyq000fxwtvliowyf8d/</id>
    <published>1969-12-31T15:00:00.000Z</published>
    <updated>2019-05-23T10:06:45.131Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
